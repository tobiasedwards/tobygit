{"type":"blob","contents":"var dir = require('./dir');\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = {\n  /* Entries (files, dirs) which are not indexed */\n  IGNORED_ENTRIES: [dir.TOBYGIT_DIR],\n\n  /* Indexes directory at given path. A callback function which has the\n   * paramaters (err, tree) is then called.\n   * // TODO: Refactor\n   */\n  indexDir: function(dirPath, callback) {\n    var tree = {\n      type: 'tree',\n      trees: {},\n      blobs: {}\n    };\n\n    fs.readdir(dirPath, function(err, entries) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      entries.forEach(function(entry) {\n        console.log(this);\n        if (this.IGNORED_ENTRIES.indexOf(entry) === -1) {\n          entryPath = path.join(dirPath, entry);\n\n          fs.lstat(entryPath, function(err, stats) {\n            if (err) {\n              callback(err, null);\n              return;\n            }\n\n            if (stats.isDirectory()) {\n              this.indexDir(entryPath, function(err, t) {\n                if (err) {\n                  callback(err, null);\n                  return;\n                }\n\n                tree.trees[entry] = t;\n              }.bind(this));\n            } else if (stats.isFile()) {\n              this.indexFile(entryPath, function(err, blob) {\n                if (err) {\n                  callback(err, null);\n                  return;\n                }\n\n                this.blobs[entry] = blob;\n              }.bind(this));\n            }\n          }.bind(this));\n        }\n      }.bind(this));\n    });\n\n    callback(null, tree);\n  },\n\n  indexBlob: function(blobPath, callback) {\n    var blob = {\n      type: 'blob',\n      name: path.basename(blobPath)\n    };\n\n    callback(null, blob);\n  }\n}\n\nmodule.exports.indexDir(dir.workingDir(), function(err, tree) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(tree);\n  }\n})\n"}